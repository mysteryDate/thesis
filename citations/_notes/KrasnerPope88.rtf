{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11400\viewh11500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Cited as:\

\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640
\cf0 Krasner, G., and S. T. Pope. 1988. "A Cookbook for Using the Model-View-ControllerUser Interface Paradigm in Smalltalk-80."Journal of Object-Oriented Programming 1(3):26-49.\
\

\b Intro
\b0 :\
\
	"[developed to] \'85 provide a general set of system components that make it possible for programmers to create portable interactive graphical applications easily."\
\

\b MVC and the Issues of Reusability and Pluggability:
\b0 \
\
	"This three-way division of an application entails separat- ing (1) the pans that represent the model of the underlying ap- plication domain from. ( 2 ) the way the model is presented to the user and from. and (3) the way the user interacts with it."\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
	"
\i Models
\i0  are those components of the system application that actually do the work (simulation of the application roman). They are quite distinct from 
\i views
\i0 , which display aspects of the models. 
\i Controllers
\i0  are used to send messages to the model, and provide the interface between the model with its associated views and the interactive user interface devices (e.g., keyboard, mouse). Each view may be though of as being closely associated with a controller, each having exactly one model, but a model may have many view/controller pairs."\
\
Views can have multiple layers, that need to communicate with one another\
\

\b Broadcasting Change
\b0 \
\
	"To maximize data encapsulation and thus code reusability, views and controllers need to know about their model explicitly, but models should not know about their views and controllers\
	A change in a model is often triggered by a controller connecting a user action to a message sent to the model. This change should be reflected in all of its views, not just the view associated with the controller that initiated the change"\
\

\b Dependents\
\
	
\b0 "To manage change notification, the notion of objects as 
\i dependents
\i0  was developed. Views controllers of a model are registered in a list as dependents of the model, to be informed whenever some aspect of the model is changed. When a model has changed, a message is broadcast to notify all of its dependents about the change. This message can be parameterized (with arguments), so that there can be many types of model change messages. Each view or controller responds to the appropriate model change messages in the appropriate manner."\
\

\b Class Model
\b0 \
\
	"The change messages with parameters (i.e., 
\b self changed: someAspect
\b0 ) are used to pass information from the model to its dependents about which aspect has changed, so as to minimize the amount of view updating needed."\
\
\
\
	\
}